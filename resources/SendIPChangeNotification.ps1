# SendIPChangeNotification.ps1
# This script checks for IP changes and sends an email if it changes

# Email settings
$smtpServer = "smtp.your-email-provider.com"
$smtpFrom = "your-email@example.com"
$smtpTo = "recipient-email@example.com"
$smtpSubject = "IP Address Change Notification"
$smtpBodyTemplate = "The IP address has changed to: {0}"

# Function to get the current IP address
function Get-CurrentIP {
    $ip = (Invoke-WebRequest -Uri "http://ipinfo.io/ip").Content.Trim()
    return $ip
}

# Function to send an email
function Send-Email {
    param (
        [string] $subject,
        [string] $body
    )
    
    $smtp = New-Object System.Net.Mail.SmtpClient($smtpServer)
    $smtp.Send($smtpFrom, $smtpTo, $subject, $body)
}

# Path to store the last known IP address
$ipFilePath = "$env:temp\last_ip.txt"

# Get the current IP address
$currentIP = Get-CurrentIP

# Check if the IP file exists
if (Test-Path $ipFilePath) {
    # Read the last known IP address
    $lastIP = Get-Content $ipFilePath
    # Check if the IP has changed
    if ($currentIP -ne $lastIP) {
        # Send an email notification
        $smtpBody = [string]::Format($smtpBodyTemplate, $currentIP)
        Send-Email -subject $smtpSubject -body $smtpBody
        # Update the last known IP address
        Set-Content -Path $ipFilePath -Value $currentIP
    }
} else {
    # Save the current IP address as the last known IP
    Set-Content -Path $ipFilePath -Value $currentIP
    # Send an initial email notification
    $smtpBody = [string]::Format($smtpBodyTemplate, $currentIP)
    Send-Email -subject $smtpSubject -body $smtpBody
}
